---
dependency:
  name: galaxy
driver:
  name: vagrant
  provider:
    name: libvirt
  cachier: machine
  parallel: true
platforms:
  - name: case1 # no existing cert
    box: jtarpley/${MOLECULE_BOX:-w2025_cis}
    memory: 2048
    cpus: 2
    provider_options:
      default_prefix: general_generate_csr_win_pipe_
    groups:
      - subjects
      - windows
  - name: case2 # existing renewable cert
    box: jtarpley/${MOLECULE_BOX:-w2025_cis}
    memory: 2048
    cpus: 2
    provider_options:
      default_prefix: general_generate_csr_win_pipe_
    groups:
      - subjects
      - windows
  - name: case3 # existing valid cert
    box: jtarpley/${MOLECULE_BOX:-w2025_cis}
    memory: 2048
    cpus: 2
    provider_options:
      default_prefix: general_generate_csr_win_pipe_
    groups:
      - subjects
      - windows
provisioner:
  name: ansible
  inventory:
    group_vars:
      subjects:
        _cert_certificate_path: C:\Windows\Temp\cert.crt
        _cert_private_key_path: C:\Windows\Temp\cert.key
        cert_existing_certificate_type: pipe
        cert_private_key_to_file: false
        cert_private_key_to_variable: true
        cert_private_key_passphrase: SecurePassphrase123!
      windows:
        ansible_shell_type: powershell
        ansible_become_method: runas
        ansible_become_user: SYSTEM
        ansible_password: vagrant
    host_vars:
      case1:
        ansible_ssh_common_args: '-o PreferredAuthentications=password -o PubkeyAuthentication=no -o UserKnownHostsFile=/dev/null -o ControlMaster=auto -o ControlPersist=60s -o ForwardX11=no -o LogLevel=ERROR -o StrictHostKeyChecking=no'
        generate_existing_private_key: false
        generate_existing_cert: false
        expected_csr: true
      case2:
        ansible_ssh_common_args: '-o PreferredAuthentications=password -o PubkeyAuthentication=no -o UserKnownHostsFile=/dev/null -o ControlMaster=auto -o ControlPersist=60s -o ForwardX11=no -o LogLevel=ERROR -o StrictHostKeyChecking=no'
        generate_existing_private_key: true
        generate_existing_cert: true
        existing_cert_duration: +1w
        expected_csr: true
      case3:
        ansible_ssh_common_args: '-o PreferredAuthentications=password -o PubkeyAuthentication=no -o UserKnownHostsFile=/dev/null -o ControlMaster=auto -o ControlPersist=60s -o ForwardX11=no -o LogLevel=ERROR -o StrictHostKeyChecking=no'
        generate_existing_private_key: true
        generate_existing_cert: true
        existing_cert_duration: +8w
        expected_csr: false
verifier:
  name: ansible
scenario:
  test_sequence:
    - dependency
    - cleanup
    - destroy
    - syntax
    - create
    - prepare
    - converge
    #- idempotence
    # Removed idempotence check, because this scenario cannot be made idempotent.
    - side_effect
    - verify
    - cleanup
    - destroy
